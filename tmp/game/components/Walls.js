// Generated by CoffeeScript 1.6.1
(function() {
  var Body, Wall, Walls, renderer, thickness;

  renderer = require('../../core/renderer');

  Wall = require('../items/Wall');

  Body = require('../items/Body');

  thickness = 10;

  /*
  ## Walls Class
  
  Used as a child of World, handles the creation of the 4 Walls around the viewport and any other
  level-specific Wall passed from the World after loading the level data
  
  Also takes care of wrapping its children into an SVG object and refreshing its tree to display the
  updated render after the addition or change of any child Wall
  */


  Walls = (function() {

    function Walls(world) {
      this.world = world;
      this.width = this.world.viewport.width;
      this.height = this.world.viewport.height;
      this.walls = [];
      this.render();
      this.build();
      this.refresh();
    }

    Walls.prototype.render = function() {
      var ctx;
      ctx = {
        width: this.world.viewport.worldToScreen(this.width),
        height: this.world.viewport.worldToScreen(this.height)
      };
      this.wrap = $(renderer.render('game-walls', ctx));
      this.svg = this.wrap.find('svg');
      return this.wrap.appendTo(this.world.stage);
    };

    Walls.prototype.refresh = function() {
      this.wrap.html(this.wrap.html());
      return this.svg = this.wrap.find('svg');
    };

    Walls.prototype.add = function(options) {
      return this.walls.push(new Wall(options, this.world, this.svg));
    };

    Walls.prototype.build = function() {
      var dir, h, opposite, w, x, y, _i, _len, _ref, _results;
      _ref = ['x', 'y'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = [false, true];
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            opposite = _ref1[_j];
            if (dir === 'x') {
              w = this.width;
              h = thickness;
              x = this.width / 2;
              y = opposite ? this.height - thickness / 2 : thickness / 2;
            } else {
              w = thickness;
              h = this.height;
              x = opposite ? this.width - thickness / 2 : thickness / 2;
              y = this.height / 2;
            }
            _results1.push(this.add({
              type: 'rect',
              x: x,
              y: y,
              width: w,
              height: h
            }));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Walls;

  })();

  module.exports = Walls;

}).call(this);
