// Generated by CoffeeScript 1.6.1
(function() {
  var Loop, requestAnimationFrame,
    _this = this;

  requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };

  /*
  ## Loop class
  
  Based on a requestAnimationFrame polyfill, it handles the loop at the very core of the game
  Callbacks may be called at a different frequencies depending on device performance
  */


  Loop = (function() {

    function Loop() {
      var _this = this;
      this.getFPS = function() {
        return Loop.prototype.getFPS.apply(_this, arguments);
      };
      this.next = function() {
        return Loop.prototype.next.apply(_this, arguments);
      };
      this.use = function(callback) {
        return Loop.prototype.use.apply(_this, arguments);
      };
      this.pause = function() {
        return Loop.prototype.pause.apply(_this, arguments);
      };
      this.play = function() {
        return Loop.prototype.play.apply(_this, arguments);
      };
      this.callbacks = [];
      this.playing = false;
      this.fps = 0;
    }

    Loop.prototype.play = function() {
      this.playing = true;
      return requestAnimationFrame(this.next);
    };

    Loop.prototype.pause = function() {
      return this.playing = false;
    };

    Loop.prototype.use = function(callback) {
      return this.callbacks.push(callback);
    };

    Loop.prototype.next = function() {
      var callback, _i, _len, _ref;
      this.getFPS();
      _ref = this.callbacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback();
      }
      if (this.playing) {
        return requestAnimationFrame(this.next);
      }
    };

    Loop.prototype.getFPS = function() {
      var delta;
      if (!this.lastUpdate) {
        this.lastUpdate = new Date().getTime();
      }
      delta = (new Date().getTime() - this.lastCalledTime) / 1000;
      this.lastCalledTime = new Date().getTime();
      return this.fps = 1 / delta;
    };

    return Loop;

  })();

  module.exports = Loop;

}).call(this);
