// Generated by CoffeeScript 1.6.1
(function() {
  var Lasers, colors, lasers, renderer;

  renderer = require('../../core/renderer');

  colors = {
    yellow: '#f2c456',
    red: '#f56949',
    blue: '#5adef6'
  };

  lasers = [];

  /*
  ## Lasers class
  
  Similar to Layer class, but handling lasers in the scene
  Renders the laser body using SVG, takes care of manipulating and updating it when needed
  */


  Lasers = (function() {

    function Lasers(world, layer) {
      this.world = world;
      this.layer = layer;
      this.viewport = this.world.viewport;
      this.width = this.viewport.width;
      this.height = this.viewport.height;
      this.render();
    }

    Lasers.prototype.render = function() {
      var ctx;
      ctx = {
        width: this.viewport.worldToScreen(this.width),
        height: this.viewport.worldToScreen(this.height)
      };
      return this.el = $(renderer.render('game-lasers', ctx));
    };

    Lasers.prototype.add = function(entityOptions) {
      var body, ctx, el, height, out, width, x, y, _i, _len, _ref;
      out = [];
      _ref = entityOptions.bodies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        body = _ref[_i];
        width = this.viewport.worldToScreen(body.width);
        height = this.viewport.worldToScreen(body.height);
        x = this.viewport.worldToScreen(body.x + entityOptions.x);
        y = this.viewport.worldToScreen(body.y + entityOptions.y);
        ctx = {
          x: x - width / 2,
          y: y - height / 2,
          width: width,
          height: height,
          fill: colors[entityOptions.attributes.color]
        };
        el = $(renderer.render('svg-rect', ctx));
        this.el.append(el);
        out.push(el);
      }
      return out;
    };

    Lasers.prototype.refresh = function() {
      this.layer.element.html(' ');
      this.el.clone().appendTo(this.layer.element);
      return this.layer.element.html(this.layer.element.html());
    };

    return Lasers;

  })();

  module.exports = Lasers;

}).call(this);
