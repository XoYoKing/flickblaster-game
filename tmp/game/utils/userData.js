// Generated by CoffeeScript 1.6.1

/*
## User Data module

Loads or creates user progress data, takes care of its storage and loading in the
`window.localStorage` object, interacts with the gameData module to get levels data and normalise
user progress
*/


(function() {
  var gameData, getLevelIndexByName, levels, levelsProgress, normaliseLevelsProgress;

  gameData = require('./gameData');

  levels = [];

  if (localStorage.levelsProgress != null) {
    levelsProgress = JSON.parse(localStorage.levelsProgress);
  } else {
    levelsProgress = [];
  }

  normaliseLevelsProgress = function() {
    var i, level, _i, _len, _results;
    _results = [];
    for (i = _i = 0, _len = levels.length; _i < _len; i = ++_i) {
      level = levels[i];
      if (levelsProgress[i] == null) {
        _results.push(levelsProgress[i] = {
          locked: i === 0 ? false : true,
          completed: false,
          stars: 0
        });
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  getLevelIndexByName = function(name) {
    var i, level, _i, _len;
    for (i = _i = 0, _len = levels.length; _i < _len; i = ++_i) {
      level = levels[i];
      if (level.name === name) {
        return i;
      }
    }
    return null;
  };

  module.exports = {
    getLevelsProgress: function() {
      levels = levels = gameData.get('levels');
      if (levelsProgress.length < levels.length) {
        normaliseLevelsProgress();
      }
      return levelsProgress;
    },
    saveLevelScore: function(levelName, stars) {
      var levelIndex;
      levelIndex = getLevelIndexByName(levelName);
      if (levelIndex != null) {
        levelsProgress[levelIndex].completed = true;
        if (stars > levelsProgress[levelIndex].stars) {
          levelsProgress[levelIndex].stars = stars;
        }
        if (levelsProgress[levelIndex + 1] != null) {
          levelsProgress[levelIndex + 1].locked = false;
        }
        return this.storeLevelsProgress();
      }
    },
    storeLevelsProgress: function() {
      return localStorage.levelsProgress = JSON.stringify(levelsProgress);
    }
  };

}).call(this);
