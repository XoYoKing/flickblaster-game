// Generated by CoffeeScript 1.6.1

/*
## Game Data module

Handles the loading and storing of the JSON game assets

The assets used are located in www/game/ and they are:
1. `levels.json`: *Index of all levels*
2. `levels/[level-name].json`: *Level maps*
3. `materials.json`: *Contains all materials properties*
4. `sprites.json`: *All sprite presets*
5. `presets.json`: *All entity presets*
*/


(function() {
  var baseDir, gameConfig, gameData, ready, readyCallbacks;

  gameConfig = require('../config');

  baseDir = gameConfig.gameDataPath;

  gameData = {
    sprites: {},
    materials: {},
    levels: []
  };

  ready = false;

  readyCallbacks = [];

  module.exports = {
    init: function() {
      console.log('INIT');
      return this.loadData(['sprites', 'materials', 'presets', 'levels'], function() {
        var cb, _i, _len, _results;
        ready = true;
        _results = [];
        for (_i = 0, _len = readyCallbacks.length; _i < _len; _i++) {
          cb = readyCallbacks[_i];
          _results.push(cb());
        }
        return _results;
      });
    },
    get: function(type, id) {
      if (!_.has(gameData, type)) {
        throw "GameData error: No data for '" + type + "'";
      }
      if (id == null) {
        return gameData[type];
      }
      if (!_.has(gameData[type], id)) {
        throw "GameData error: '" + type + "' does not contain '" + id + "'";
      }
      return gameData[type][id];
    },
    onReady: function(cb) {
      if (ready) {
        return cb();
      } else {
        return readyCallbacks.push(cb);
      }
    },
    loadLevel: function(id, callback) {
      return $.getJSON("" + baseDir + "/levels/" + id + ".json", function(level) {
        if (typeof callback === 'function') {
          return callback(level);
        }
      }).fail(function(req, err) {
        throw "Error loading level: " + id + ".json - " + err;
      });
    },
    loadData: function(nsArr, callback) {
      var loaded, ns, _i, _len, _results,
        _this = this;
      console.log('TAKING CARE OF MANY');
      loaded = 0;
      _results = [];
      for (_i = 0, _len = nsArr.length; _i < _len; _i++) {
        ns = nsArr[_i];
        _results.push((function(ns) {
          console.log('TAKING CARE OF 1');
          return $.getJSON("" + baseDir + "/" + ns + ".json", function(data) {
            gameData[ns] = data;
            _this.solveInheritances(ns);
            loaded++;
            if (loaded === nsArr.length && typeof callback === 'function') {
              return callback(data);
            }
          }).fail(function(req, err) {
            throw "Error loading game data: " + ns + ".json - " + err;
          });
        })(ns));
      }
      return _results;
    },
    solveInheritances: function(ns) {
      var item, itemId, _ref, _results;
      _ref = gameData[ns];
      _results = [];
      for (itemId in _ref) {
        item = _ref[itemId];
        _results.push(item = this.solveInheritance(ns, itemId));
      }
      return _results;
    },
    solveInheritance: function(ns, id) {
      var extendFrom;
      while (gameData[ns][id]["extends"] != null) {
        extendFrom = gameData[ns][id]["extends"];
        gameData[ns][id]["extends"] = null;
        gameData[ns][id] = $.extend({}, this.get(ns, extendFrom), gameData[ns][id]);
      }
      return gameData[ns][id];
    }
  };

}).call(this);
