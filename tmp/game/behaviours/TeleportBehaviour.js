// Generated by CoffeeScript 1.6.1
(function() {
  var BaseActionableBehaviour, TeleportBehaviour,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseActionableBehaviour = require('./BaseActionableBehaviour');

  /*
  ## Teleport behaviour
  
  An actionable behaviour that teleports the player to the location of a second entity with 'id'
  matching its Entity 'target-id' attribute
  
  Read BaseActionableBehaviour and the Actions module for more
  */


  TeleportBehaviour = (function(_super) {

    __extends(TeleportBehaviour, _super);

    function TeleportBehaviour(entity, world) {
      this.entity = entity;
      this.world = world;
      TeleportBehaviour.__super__.constructor.apply(this, arguments);
      this.sprite = this.entity.sprites[0];
      this.lights = this.sprite.decorators.lights;
    }

    TeleportBehaviour.prototype.activate = function(player) {
      var playerSprite, target,
        _this = this;
      if (this.active) {
        return;
      }
      TeleportBehaviour.__super__.activate.apply(this, arguments);
      if (this.entity.hasAttr('target-id')) {
        target = this.world.getItemById(this.entity.attributes['target-id']);
      }
      playerSprite = player.sprites[0].el;
      if (target != null) {
        this.lightsFx();
        if ((target.attributes.type != null) && target.attributes.type === 'teleport') {
          target.behaviour.lightsFx(200);
        }
        return playerSprite.transition({
          opacity: 0
        }, 30, function() {
          player.body.moveTo(target.position());
          return playerSprite.transition({
            opacity: 1
          }, 30);
        });
      }
    };

    TeleportBehaviour.prototype.lightsFx = function(delay) {
      var _this = this;
      if (delay == null) {
        delay = 0;
      }
      this.active = true;
      return setTimeout((function() {
        return (_this.lights.css({
          opacity: 0,
          rotation: 0
        })).show().stop().transition({
          opacity: 1,
          rotate: 90
        }, 100, 'easeOutCirc', function() {
          _this.active = false;
          return _this.lights.stop().transition({
            opacity: 0,
            rotate: 180
          }, 200, 'easeInCirc');
        });
      }), delay);
    };

    TeleportBehaviour.prototype.update = function() {};

    return TeleportBehaviour;

  })(BaseActionableBehaviour);

  module.exports = TeleportBehaviour;

}).call(this);
