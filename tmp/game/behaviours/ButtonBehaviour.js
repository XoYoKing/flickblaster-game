// Generated by CoffeeScript 1.6.1
(function() {
  var BaseActionableBehaviour, ButtonBehaviour,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseActionableBehaviour = require('./BaseActionableBehaviour');

  /*
  ## Button Behaviour class
  
  Buttons are an Actionable Behaviour that executes an action specified with an 'action' attribute
  on the Entity
  
  Read BaseActionableBehaviour and the Actions module for more
  */


  ButtonBehaviour = (function(_super) {

    __extends(ButtonBehaviour, _super);

    function ButtonBehaviour(entity, world) {
      this.entity = entity;
      this.world = world;
      ButtonBehaviour.__super__.constructor.apply(this, arguments);
      this.anchor = this.entity.attributes.anchor || 'left';
    }

    ButtonBehaviour.prototype.activate = function(player) {
      var bgPos, css, height, sprite, width;
      if (this.active) {
        return;
      }
      ButtonBehaviour.__super__.activate.apply(this, arguments);
      sprite = this.entity.sprites[0];
      bgPos = (sprite.el.css('background-position')).split(' ');
      bgPos = {
        x: (bgPos[0].replace('px', '')) + 0,
        y: (bgPos[1].replace('px', '')) + 0
      };
      css = {};
      if (this.anchor === 'left' || this.anchor === 'right') {
        width = sprite.el.width();
        css.width = width / 2;
        css.backgroundPosition = "" + (bgPos.x - width / 2) + "px " + bgPos.y + "px";
        if (this.anchor === 'right') {
          css.left = width / 2;
        }
      }
      if (this.anchor === 'top' || this.anchor === 'bottom') {
        height = sprite.el.height();
        css.height = height / 2;
        css.backgroundPosition = "" + bgPos.x + "px -" + (bgPos.y - height / 2) + "px";
        if (this.anchor === 'bottom') {
          css.top = height / 2;
        }
      }
      sprite.el.transition(css, 100);
      return this.active = true;
    };

    ButtonBehaviour.prototype.update = function() {};

    return ButtonBehaviour;

  })(BaseActionableBehaviour);

  module.exports = ButtonBehaviour;

}).call(this);
