// Generated by CoffeeScript 1.6.1

/*
## Actions module

Actions are abstracted, common functions used by some behaviours

They are mapped to keys that match the 'action' attribute specified on Entities - mainly using
the editor, which some behaviours will parse and exectute passing the target Entity
*/


(function() {
  var actions, getEntityTargets;

  getEntityTargets = function(entity, world, type) {
    var targets;
    if (type == null) {
      type = null;
    }
    targets = [];
    if (entity.hasAttr('target-id')) {
      targets.push(world.getItemById(entity.attributes['target-id']));
    }
    if (entity.hasAttr('target-group')) {
      if (entity.attributes['target-group'] === 'all' && (type != null)) {
        targets = targets.concat(world.getItemsByAttr('type', type));
      } else {
        targets = targets.concat(world.getItemsByAttr('group', entity.attributes['target-group']));
      }
    }
    return targets;
  };

  actions = {
    'laser-toggle': function(entity, world, behaviour) {
      var target, targets, _i, _len, _results;
      targets = getEntityTargets(entity, world, 'laser');
      _results = [];
      for (_i = 0, _len = targets.length; _i < _len; _i++) {
        target = targets[_i];
        _results.push(target.behaviour.toggle());
      }
      return _results;
    },
    'laser-off': function(entity, world, behaviour) {
      var target, targets, _i, _len, _results;
      targets = getEntityTargets(entity, world, 'laser');
      _results = [];
      for (_i = 0, _len = targets.length; _i < _len; _i++) {
        target = targets[_i];
        _results.push(target.behaviour.off());
      }
      return _results;
    },
    'laser-on': function(entity, world, behaviour) {
      var target, targets, _i, _len, _results;
      targets = getEntityTargets(entity, world, 'laser');
      _results = [];
      for (_i = 0, _len = targets.length; _i < _len; _i++) {
        target = targets[_i];
        _results.push(target.behaviour.on());
      }
      return _results;
    }
  };

  module.exports = {
    perform: function(action, target) {
      if (actions[action] != null) {
        return actions[action](target.entity, target.world, target);
      }
    }
  };

}).call(this);
