// Generated by CoffeeScript 1.6.1
(function() {
  var BaseActionableBehaviour, BaseBehaviour, actions,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseBehaviour = require('./BaseBehaviour');

  actions = require('./actions');

  /*
  ## Base Actionable Behaviour class
  
  Base behaviour for buttons, sensors, teleports and all behaviours that react to player collisions
  
  Calls .activate when touching the player, it needs to be deactivated before running again
  */


  BaseActionableBehaviour = (function(_super) {

    __extends(BaseActionableBehaviour, _super);

    function BaseActionableBehaviour(entity, world) {
      var player, players, _i, _len,
        _this = this;
      this.entity = entity;
      this.world = world;
      BaseActionableBehaviour.__super__.constructor.apply(this, arguments);
      this.active = false;
      players = this.world.getItemsByAttr('type', 'player');
      for (_i = 0, _len = players.length; _i < _len; _i++) {
        player = players[_i];
        this.entity.onCollisionStart(player, function() {
          return _this.activate(player);
        });
      }
    }

    BaseActionableBehaviour.prototype.activate = function() {
      if (this.active) {
        return;
      }
      if (this.entity.hasAttr('action')) {
        return actions.perform(this.entity.attributes.action, this);
      }
    };

    return BaseActionableBehaviour;

  })(BaseBehaviour);

  module.exports = BaseActionableBehaviour;

}).call(this);
