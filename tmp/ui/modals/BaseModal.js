// Generated by CoffeeScript 1.6.1
(function() {
  var BaseModal, modalTemplate, renderer, selectors, transitionTime;

  renderer = require('../../core/renderer');

  modalTemplate = 'modal';

  transitionTime = 200;

  selectors = {
    inner: '.modal',
    overlay: '.overlay'
  };

  /*
  ## Base Modal class
  
  Extend this class to create a custom modal.
  Instanciate the class to render and open the modal
  
  Class-based modals may not necessarily be a great idea,
  but hey, I wanted to try a new approach.
  Deal with it.
  */


  BaseModal = (function() {

    BaseModal.prototype.templateName = 'modal-foo';

    BaseModal.prototype.classNames = '';

    function BaseModal(wrap, context, options) {
      this.wrap = wrap;
      this.context = context;
      if (options == null) {
        options = {};
      }
      this.onClose = options.onClose || null;
      this.onOpen = options.onOpen || null;
      this.open();
    }

    BaseModal.prototype.render = function() {
      var body;
      body = renderer.render(this.templateName, this.context);
      this.el = $(renderer.render(modalTemplate, $.extend(this.context, {
        body: body
      })));
      this.overlay = this.el.find(selectors.overlay);
      this.inner = this.el.find(selectors.inner);
      return this.inner.addClass(this.classNames);
    };

    BaseModal.prototype.open = function() {
      var _this = this;
      this.render();
      this.overlay.add(this.inner).css({
        opacity: 0
      });
      this.el.appendTo(this.wrap);
      this.inner.css({
        x: (this.wrap.width() - this.inner.outerWidth()) / 2,
        y: (this.wrap.height() - this.inner.outerHeight()) / 2,
        scale: .5
      });
      this.overlay.transition({
        opacity: 1
      }, transitionTime / 2);
      return this.inner.transition({
        scale: 1,
        opacity: 1
      }, transitionTime, function() {
        _this.bind();
        if (_this.onOpen != null) {
          return _this.onOpen(_this);
        }
      });
    };

    BaseModal.prototype.bind = function() {};

    BaseModal.prototype.close = function(callback) {
      var _this = this;
      this.overlay.transition({
        opacity: 0
      }, transitionTime / 2);
      return this.inner.transition({
        scale: .5,
        opacity: 0
      }, transitionTime, function() {
        _this.el.remove();
        if (_this.onClose != null) {
          return _this.onClose(_this);
        }
      });
    };

    return BaseModal;

  })();

  module.exports = BaseModal;

}).call(this);
