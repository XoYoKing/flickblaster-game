// Generated by CoffeeScript 1.6.1

/*
## Views module

Stores, instanciates, animates and handles views
*/


(function() {
  var device, getByRole, renderer, transitions, viewWrap, win;

  renderer = require('./renderer');

  device = require('./device');

  getByRole = (require('../helpers/dom')).getByRole;

  transitions = require('./viewTransitions');

  win = $(window);

  viewWrap = $('#view-wrap');

  module.exports = {
    wrap: $('#view-wrap'),
    current: null,
    shown: [],
    views: {},
    init: function() {
      var screen;
      screen = device.getSize();
      return viewWrap.css({
        overflow: 'hidden',
        width: screen.width,
        height: screen.height,
        left: (win.width() - screen.width) / 2,
        top: (win.height() - screen.height) / 2
      });
    },
    closeAll: function() {
      return getByRole('view', this.wrap).remove();
    },
    load: function(ns, view) {
      var routes, _results;
      if (typeof ns === 'object') {
        routes = ns;
        _results = [];
        for (ns in routes) {
          view = routes[ns];
          _results.push(this.load(ns, view));
        }
        return _results;
      } else {
        return this.views[ns] = view;
      }
    },
    open: function(ns, transition, callback, openOnTop, options) {
      var view;
      if (transition == null) {
        transition = null;
      }
      if (callback == null) {
        callback = null;
      }
      if (openOnTop == null) {
        openOnTop = false;
      }
      if (options == null) {
        options = {};
      }
      if (!openOnTop) {
        this.shown = [];
      }
      if ((transition != null) && this.animating) {
        return false;
      }
      if (typeof ns === 'object') {
        view = ns;
      } else {
        view = new this.views[ns](options);
      }
      if (view.elements == null) {
        view.render(this.wrap);
      } else {
        view.show();
      }
      if ((transition != null) && _.has(this.transitions, transition)) {
        this.applyTransition(view, transition, callback, openOnTop);
      } else {
        this.onShown(view, callback, openOnTop);
      }
      return view;
    },
    applyTransition: function(view, transition, callback, openOnTop) {
      var newViewStyle, oldViewStyle, wrapStyle,
        _this = this;
      if (callback == null) {
        callback = null;
      }
      if (openOnTop == null) {
        openOnTop = false;
      }
      this.animating = true;
      oldViewStyle = this.current.elements.main.attr('style');
      newViewStyle = view.elements.main.attr('style');
      wrapStyle = this.wrap.attr('style');
      return this.transitions[transition](view, this.current, function() {
        _this.animating = false;
        _this.onShown(view, callback, openOnTop);
        _this.current.elements.main.stop();
        view.elements.main.stop();
        if (oldViewStyle) {
          _this.current.elements.main.attr('style', oldViewStyle);
        } else {
          _this.current.elements.main.removeAttr('style');
        }
        if (newViewStyle) {
          view.elements.main.attr('style', newViewStyle);
        } else {
          view.elements.main.removeAttr('style');
        }
        return _this.wrap.attr('style', wrapStyle);
      });
    },
    onShown: function(view, callback, openOnTop) {
      if (callback == null) {
        callback = null;
      }
      if (openOnTop == null) {
        openOnTop = false;
      }
      view.transitionComplete();
      if (!openOnTop) {
        if (this.current != null) {
          this.current.close();
        }
      } else {
        this.current.hide();
      }
      this.shown.push(view);
      this.current = view;
      if (callback != null) {
        return callback(view);
      }
    },
    transitions: transitions
  };

}).call(this);
